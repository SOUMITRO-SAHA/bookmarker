// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

// Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Icon {
  id       String     @id @default(cuid())
  label    String     @unique
  MenuItem MenuItem[]
}

model Subfolder {
  id         String   @id @default(cuid())
  label      String   @unique
  route      String
  menuItemId String
  parent     MenuItem @relation(fields: [menuItemId], references: [id])
  Post       Post[]
}

model MenuItem {
  id         String      @id @default(cuid())
  label      String      @unique
  route      String      @unique
  iconId     String
  icon       Icon        @relation(fields: [iconId], references: [id])
  subfolders Subfolder[]
  Post       Post[]
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  content     String?    @db.Text
  menuItemId  String?
  menuItem    MenuItem?  @relation(fields: [menuItemId], references: [id])
  subfolderId String?
  subfolder   Subfolder? @relation(fields: [subfolderId], references: [id])
}
