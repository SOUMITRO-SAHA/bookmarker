// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserPermissionRole {
  USER
  ADMIN
}

// Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPassword {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  email     String
  expires   DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id            String             @id @default(cuid())
  username      String?
  name          String?
  password      UserPassword?
  email         String?            @unique
  emailVerified DateTime?
  avatar        String?
  avatarUrl     String?
  bio           String?
  theme         String?
  metadata      Json?
  verified      Boolean?           @default(false)
  role          UserPermissionRole @default(USER)
  locked        Boolean?           @default(false)

  feedbacks Feedback[]
  accounts  Account[]
  sessions  Session[]
  Profile   Profile[]

  @@unique([username, email])
  @@index([username])
  @@index([emailVerified])
  @@map(name: "users")
}

model Avatar {
  userId String
  // base64 string
  data   String

  @@unique([userId])
  @@map(name: "avatars")
}

model Profile {
  id        String   @id @default(cuid())
  uid       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([uid])
  @@index([userId])
}

model Feedback {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating  String
  comment String?

  @@index([userId])
  @@index([rating])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Icon {
  id     String   @id @default(cuid())
  label  String   @unique
  Folder Folder[]
}

model Subfolder {
  id       String @id @default(cuid())
  label    String @unique
  route    String
  folderId String
  parent   Folder @relation(fields: [folderId], references: [id])
  Post     Post[]
}

model Folder {
  id         String      @id @default(cuid())
  label      String      @unique
  route      String      @unique
  iconId     String
  icon       Icon        @relation(fields: [iconId], references: [id])
  subfolders Subfolder[]
  Post       Post[]
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  content     String?    @db.Text
  folderId    String?
  Folder      Folder?    @relation(fields: [folderId], references: [id])
  subfolderId String?
  subfolder   Subfolder? @relation(fields: [subfolderId], references: [id])
}
